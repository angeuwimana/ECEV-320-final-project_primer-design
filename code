#import raw data and library

setwd("/Users/caichufan/Library/Mobile Documents/com~apple~CloudDocs/final project")
library(dplyr)
plasmid_sequence <- read.delim("human TET2 sequene single strand.txt", header = FALSE, stringsAsFactors = FALSE)

#b is the DNA position we want the primer, here we use an example, b=1680, and you may change to any numbers
b <- 1680
#clean up raw data, to data frame

plasmid_sequence <- strsplit(plasmid_sequence[1,1],"")
plasmid_sequence <- data.frame(plasmid_sequence[1], row.names = NULL, 
                             check.rows = FALSE, check.names = TRUE, 
                             fix.empty.names = TRUE, stringsAsFactors=FALSE)

#generate all primer_precursors (a = length of primer -1)

a <- 17
primer_precursor_17 <- NULL
for (i in 0:a){
  primer_precursor_17 <- rbind(primer_precursor_17, plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

primer_precursor_17 <- data.frame(primer_precursor_17, row.names = NULL, 
                               check.rows = FALSE, check.names = TRUE, 
                               fix.empty.names = TRUE, stringsAsFactors=FALSE)

a <- 18
primer_precursor_18 <- NULL
for (i in 0:a){
  primer_precursor_18 <- rbind(primer_precursor_18, plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

primer_precursor_18 <- data.frame(primer_precursor_18, row.names = NULL, 
                                  check.rows = FALSE, check.names = TRUE, 
                                  fix.empty.names = TRUE, stringsAsFactors=FALSE)

a <- 19
primer_precursor_19 <- NULL
for (i in 0:a){
  primer_precursor_19 <- rbind(primer_precursor_19, plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

primer_precursor_19 <- data.frame(primer_precursor_19, row.names = NULL, 
                                  check.rows = FALSE, check.names = TRUE, 
                                  fix.empty.names = TRUE, stringsAsFactors=FALSE)

a <- 20
primer_precursor_20 <- NULL
for (i in 0:a){
  primer_precursor_20 <- rbind(primer_precursor_20, plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

primer_precursor_20 <- data.frame(primer_precursor_20, row.names = NULL, 
                                  check.rows = FALSE, check.names = TRUE, 
                                  fix.empty.names = TRUE, stringsAsFactors=FALSE)

a <- 21
primer_precursor_21 <- NULL
for (i in 0:a){
  primer_precursor_21 <- rbind(primer_precursor_21, plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

primer_precursor_21 <- data.frame(primer_precursor_21, row.names = NULL, 
                                  check.rows = FALSE, check.names = TRUE, 
                                  fix.empty.names = TRUE, stringsAsFactors=FALSE)

a <- 22
primer_precursor_22 <- NULL
for (i in 0:a){
  primer_precursor_22 <- rbind(primer_precursor_22, plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

primer_precursor_22 <- data.frame(primer_precursor_22, row.names = NULL, 
                                  check.rows = FALSE, check.names = TRUE, 
                                  fix.empty.names = TRUE, stringsAsFactors=FALSE)

a <- 23
primer_precursor_23 <- NULL
for (i in 0:a){
  primer_precursor_23 <- rbind(primer_precursor_23, plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

primer_precursor_23 <- data.frame(primer_precursor_23, row.names = NULL, 
                                  check.rows = FALSE, check.names = TRUE, 
                                  fix.empty.names = TRUE, stringsAsFactors=FALSE)


primer_precursors <- bind_rows(primer_precursor_17, primer_precursor_18, primer_precursor_19, 
                               primer_precursor_20, primer_precursor_21, primer_precursor_22, 
                               primer_precursor_23, .id = NULL)

#---------------------------------------------------------------------------------------------------------------
#complement whole_sequence, and subtract all primers in the complemented sequence again

plasmid_sequence <- read.delim("human TET2 sequene single strand.txt", header = FALSE
                                          , stringsAsFactors = FALSE)

plasmid_sequence <- strsplit(plasmid_sequence[1,1],"")
plasmid_sequence <- paste(unlist(plasmid_sequence), collapse='')
complement_plasmid_sequence <- chartr("ATGC","TACG", plasmid_sequence)
complement_plasmid_sequence <- as.character(complement_plasmid_sequence)

complement_plasmid_sequence <- strsplit(complement_plasmid_sequence,"")

complement_plasmid_sequence <- data.frame(complement_plasmid_sequence[1], row.names = NULL, 
                               check.rows = FALSE, check.names = TRUE, 
                               fix.empty.names = TRUE, stringsAsFactors=FALSE)


a <- 17
complement_primer_precursor_17 <- NULL
for (i in 0:a){
  complement_primer_precursor_17 <- rbind(complement_primer_precursor_17, 
                                          complement_plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

complement_primer_precursor_17 <- data.frame(complement_primer_precursor_17, row.names = NULL, 
                                  check.rows = FALSE, check.names = TRUE, 
                                  fix.empty.names = TRUE, stringsAsFactors=FALSE)

a <- 18
complement_primer_precursor_18 <- NULL
for (i in 0:a){
  complement_primer_precursor_18 <- rbind(complement_primer_precursor_18, 
                                          complement_plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

complement_primer_precursor_18 <- data.frame(complement_primer_precursor_18, row.names = NULL, 
                                  check.rows = FALSE, check.names = TRUE, 
                                  fix.empty.names = TRUE, stringsAsFactors=FALSE)

a <- 19
complement_primer_precursor_19 <- NULL
for (i in 0:a){
  complement_primer_precursor_19 <- rbind(complement_primer_precursor_19, 
                                          complement_plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

complement_primer_precursor_19 <- data.frame(complement_primer_precursor_19, row.names = NULL, 
                                  check.rows = FALSE, check.names = TRUE, 
                                  fix.empty.names = TRUE, stringsAsFactors=FALSE)

a <- 20
complement_primer_precursor_20 <- NULL
for (i in 0:a){
  complement_primer_precursor_20 <- rbind(complement_primer_precursor_20, 
                                          complement_plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

complement_primer_precursor_20 <- data.frame(complement_primer_precursor_20, row.names = NULL, 
                                  check.rows = FALSE, check.names = TRUE, 
                                  fix.empty.names = TRUE, stringsAsFactors=FALSE)

a <- 21
complement_primer_precursor_21 <- NULL
for (i in 0:a){
  complement_primer_precursor_21 <- rbind(complement_primer_precursor_21, 
                                          complement_plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

complement_primer_precursor_21 <- data.frame(complement_primer_precursor_21, row.names = NULL, 
                                  check.rows = FALSE, check.names = TRUE, 
                                  fix.empty.names = TRUE, stringsAsFactors=FALSE)

a <- 22
complement_primer_precursor_22 <- NULL
for (i in 0:a){
  complement_primer_precursor_22 <- rbind(complement_primer_precursor_22, 
                                          complement_plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

complement_primer_precursor_22 <- data.frame(complement_primer_precursor_22, row.names = NULL, 
                                  check.rows = FALSE, check.names = TRUE, 
                                  fix.empty.names = TRUE, stringsAsFactors=FALSE)

a <- 23
complement_primer_precursor_23 <- NULL
for (i in 0:a){
  complement_primer_precursor_23 <- rbind(complement_primer_precursor_23, 
                                          complement_plasmid_sequence[(b-i):(b+a-i),], .id = NULL)}

complement_primer_precursor_23 <- data.frame(complement_primer_precursor_23, row.names = NULL, 
                                  check.rows = FALSE, check.names = TRUE, 
                                  fix.empty.names = TRUE, stringsAsFactors=FALSE)


complement_primer_precursors <- bind_rows(complement_primer_precursor_17, complement_primer_precursor_18, 
                                          complement_primer_precursor_19, complement_primer_precursor_20, 
                                          complement_primer_precursor_21, complement_primer_precursor_22, 
                                          complement_primer_precursor_23, .id = NULL)
                                          
#####################################################################################################################
##Emma Code for primer precursor, GC
#We will use the R package,  seqinr  which is frequently used by biologists for sequence manipulation.

install.packages("seqinr")
library(seqinr)

#calculate the gc content of each row in 18bp primers
pp_18_GC <-apply(as.matrix(primer_precursor_17), MARGIN = 1, FUN = GC)

#calculate the gc content of each row in 19bp primers
pp_19_GC <-apply(as.matrix(primer_precursor_18), MARGIN = 1, FUN = GC)

#calculate the gc content of each row in 20bp primers
pp_20_GC <-apply(as.matrix(primer_precursor_19), MARGIN = 1, FUN = GC)

#calculate the gc content of each row in 21bp primers
pp_21_GC <-apply(as.matrix(primer_precursor_20), MARGIN = 1, FUN = GC)

#calculate the gc content of each row in 22bp primers
pp_22_GC <-apply(as.matrix(primer_precursor_21), MARGIN = 1, FUN = GC)

#calculate the gc content of each row in 23bp primers
pp_23_GC <-apply(as.matrix(primer_precursor_22), MARGIN = 1, FUN = GC)

#calculate the gc content of each row in 24bp primers
pp_24_GC <-apply(as.matrix(primer_precursor_23), MARGIN = 1, FUN = GC)

#merge data so that the potential primers have their associated GC
primer_precursor_17["GC Content"] <- pp_18_GC
primer_precursor_18["GC Content"] <- pp_19_GC
primer_precursor_19["GC Content"] <- pp_20_GC
primer_precursor_20["GC Content"] <- pp_21_GC
primer_precursor_21["GC Content"] <- pp_22_GC
primer_precursor_22["GC Content"] <- pp_23_GC
primer_precursor_23["GC Content"] <- pp_24_GC


#remove primers that are not within 50-60%
#we can do this through dplyr
library(dplyr)

#for loop that takes the GC content of the complement_primer_precursor$GC Content column
#if the GC content >= 0.4 and <=0.6, it will create a new file called cpp_(bplenght)bp_pass_GC_threshold

#18bp
for (i in (primer_precursor_17$`GC Content`)){
  pp_18bp_pass_GC_threshold <- subset(primer_precursor_17,(primer_precursor_17$`GC Content`)>=0.4 & (primer_precursor_17$`GC Content`)<=0.6)
}

#19bp
for (i in (primer_precursor_18$`GC Content`)){
  pp_19bp_pass_GC_threshold <- subset(primer_precursor_18,(primer_precursor_18$`GC Content`)>=0.4 & (primer_precursor_18$`GC Content`)<=0.6)
}

#20bp
for (i in (primer_precursor_19$`GC Content`)){
  pp_20bp_pass_GC_threshold <- subset(primer_precursor_19,(primer_precursor_19$`GC Content`)>=0.4 & (primer_precursor_19$`GC Content`)<=0.6)
}
#21bp
for (i in (primer_precursor_20$`GC Content`)){
  pp_21bp_pass_GC_threshold <- subset(primer_precursor_20,(primer_precursor_20$`GC Content`)>=0.4 & (primer_precursor_20$`GC Content`)<=0.6)
}

#22bp
for (i in (primer_precursor_21$`GC Content`)){
  pp_22bp_pass_GC_threshold <- subset(primer_precursor_21,(primer_precursor_21$`GC Content`)>=0.4 & (primer_precursor_21$`GC Content`)<=0.6)
}

#23bp
for (i in (primer_precursor_22$`GC Content`)){
  pp_23bp_pass_GC_threshold <- subset(primer_precursor_22,(primer_precursor_22$`GC Content`)>=0.4 & (primer_precursor_22$`GC Content`)<=0.6)
}

#24bp
for (i in (primer_precursor_23$`GC Content`)){
  pp_24bp_pass_GC_threshold <- subset(primer_precursor_23,(primer_precursor_23$`GC Content`)>=0.4 & (primer_precursor_23$`GC Content`)<=0.6)
}


#######################################################################################################
#Emma code for primer precursor, Tm calculations
###calculate the Tm of a primer through the TmCalculator package
install.packages("TmCalculator")
library(TmCalculator)

##there are three different ways to calcualte Tm, based off of GC/based off of other nucleotides, and the Wallace Method (good for primer 14-20bp)
##we will use the Tm_NN function which takes into account the bases as well as ionic concentrations of the PCR reaction
#Tm_NN(nearest neighbor thermodynamics) is considered to be the most accurate of the Tm methods, as it takes into account primer content rather than biasing off of primer length
#you can change the input of the pcr reaction ionic concentrations using this method
##we will need to convert into strings in order for this function to work, using the Biostrings package

install.packages("Biostrings")
library(Biostrings)

#for loop to find the Tm of the first primer precursor, need to figure out how to run over all rows
#18bp primers by row
#to determine how many rows there are, irrespective of row name (since some row names have already been filtered out)
nrow(pp_18bp_pass_GC_threshold)

for (i in nrow(pp_18bp_pass_GC_threshold)){
  pp_18bp_pass_GC_threshold_Tm <- (apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm,apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm,apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  pp_18bp_pass_GC_threshold_Tm <- rbind(pp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_18bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
}



#add column to the primers that passed the GC threshold 
pp_18bp_pass_GC_threshold <- cbind(pp_18bp_pass_GC_threshold, pp_18bp_pass_GC_threshold_Tm)
print(pp_18bp_pass_GC_threshold)

#19bp primers by row

nrow(pp_19bp_pass_GC_threshold)

for (i in nrow(pp_19bp_pass_GC_threshold)){
  pp_19bp_pass_GC_threshold_Tm <- apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN)
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[16,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[17,])), MARGIN = 1, FUN = Tm_NN))
  pp_19bp_pass_GC_threshold_Tm <- rbind(pp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_19bp_pass_GC_threshold[18,])), MARGIN = 1, FUN = Tm_NN))
}

#add column to the primers that passed the GC threshold 
pp_19bp_pass_GC_threshold <- cbind(pp_19bp_pass_GC_threshold, pp_19bp_pass_GC_threshold_Tm)
print(pp_19bp_pass_GC_threshold)

#20bp primers by row

nrow(pp_20bp_pass_GC_threshold)

for (i in nrow(pp_20bp_pass_GC_threshold)){
  pp_20bp_pass_GC_threshold_Tm <- apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN)
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[16,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[17,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[18,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[19,])), MARGIN = 1, FUN = Tm_NN))
  pp_20bp_pass_GC_threshold_Tm <- rbind(pp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_20bp_pass_GC_threshold[20,])), MARGIN = 1, FUN = Tm_NN))
}


#add column to the primers that passed the GC threshold 
pp_20bp_pass_GC_threshold <- cbind(pp_20bp_pass_GC_threshold, pp_20bp_pass_GC_threshold_Tm)
print(pp_20bp_pass_GC_threshold)


#21bp primers by row

nrow(pp_21bp_pass_GC_threshold)

for (i in nrow(pp_21bp_pass_GC_threshold)){
  pp_21bp_pass_GC_threshold_Tm <- apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN)
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[16,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[17,])), MARGIN = 1, FUN = Tm_NN))
  pp_21bp_pass_GC_threshold_Tm <- rbind(pp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_21bp_pass_GC_threshold[18,])), MARGIN = 1, FUN = Tm_NN))
}

#add column to the primers that passed the GC threshold 
pp_21bp_pass_GC_threshold <- cbind(pp_21bp_pass_GC_threshold, pp_21bp_pass_GC_threshold_Tm)
print(pp_21bp_pass_GC_threshold)



#22BP

nrow(pp_22bp_pass_GC_threshold)

for (i in nrow(pp_22bp_pass_GC_threshold)){
  pp_22bp_pass_GC_threshold_Tm <- apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN)
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[16,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[17,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[18,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[19,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[20,])), MARGIN = 1, FUN = Tm_NN))
  pp_22bp_pass_GC_threshold_Tm <- rbind(pp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_22bp_pass_GC_threshold[21,])), MARGIN = 1, FUN = Tm_NN))
}

#add column to the primers that passed the GC threshold 
pp_22bp_pass_GC_threshold <- cbind(pp_22bp_pass_GC_threshold, pp_22bp_pass_GC_threshold_Tm)
print(pp_22bp_pass_GC_threshold)


#23bp

nrow(pp_23bp_pass_GC_threshold)

for (i in nrow(pp_23bp_pass_GC_threshold)){
  pp_23bp_pass_GC_threshold_Tm <- apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN)
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
  pp_23bp_pass_GC_threshold_Tm <- rbind(pp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_23bp_pass_GC_threshold[16,])), MARGIN = 1, FUN = Tm_NN))
}

#add column to the primers that passed the GC threshold 
pp_23bp_pass_GC_threshold <- cbind(pp_23bp_pass_GC_threshold, pp_23bp_pass_GC_threshold_Tm)
print(pp_23bp_pass_GC_threshold)



#24BP

nrow(pp_24bp_pass_GC_threshold)

for (i in nrow(pp_24bp_pass_GC_threshold)){
  pp_24bp_pass_GC_threshold_Tm <- apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN)
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[16,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[17,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[18,])), MARGIN = 1, FUN = Tm_NN))
  pp_24bp_pass_GC_threshold_Tm <- rbind(pp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(pp_24bp_pass_GC_threshold[19,])), MARGIN = 1, FUN = Tm_NN))
}

#add column to the primers that passed the GC threshold 
pp_24bp_pass_GC_threshold <- cbind(pp_24bp_pass_GC_threshold, pp_24bp_pass_GC_threshold_Tm)
print(pp_24bp_pass_GC_threshold)


#rename column names
colnames(pp_18bp_pass_GC_threshold)[20] <- "Tm"
colnames(pp_19bp_pass_GC_threshold)[21] <- "Tm"
colnames(pp_20bp_pass_GC_threshold)[22] <- "Tm"
colnames(pp_21bp_pass_GC_threshold)[23] <- "Tm"
colnames(pp_22bp_pass_GC_threshold)[24] <- "Tm"
colnames(pp_23bp_pass_GC_threshold)[25] <- "Tm"
colnames(pp_24bp_pass_GC_threshold)[26] <- "Tm"


#filter out the Tm that are not within 50-60 degrees
#lets try the subset function, similar to what we did with gc content

#18bp
for (i in (pp_18bp_pass_GC_threshold$`Tm`)){
  pp_18bp_pass_GC_and_Tm_threshold <- subset(pp_18bp_pass_GC_threshold,(pp_18bp_pass_GC_threshold$`Tm`)>=50 & (pp_18bp_pass_GC_threshold$`Tm`)<=60)
}

#19bp
for (i in (pp_19bp_pass_GC_threshold$`Tm`)){
  pp_19bp_pass_GC_and_Tm_threshold <- subset(pp_19bp_pass_GC_threshold,(pp_19bp_pass_GC_threshold$`Tm`)>=50 & (pp_19bp_pass_GC_threshold$`Tm`)<=60)
}

#20bp
for (i in (pp_20bp_pass_GC_threshold$`Tm`)){
  pp_20bp_pass_GC_and_Tm_threshold <- subset(pp_20bp_pass_GC_threshold,(pp_20bp_pass_GC_threshold$`Tm`)>=50 & (pp_20bp_pass_GC_threshold$`Tm`)<=60)
}

#21
for (i in (pp_21bp_pass_GC_threshold$`Tm`)){
  pp_21bp_pass_GC_and_Tm_threshold <- subset(pp_21bp_pass_GC_threshold,(pp_21bp_pass_GC_threshold$`Tm`)>=50 & (pp_21bp_pass_GC_threshold$`Tm`)<=60)
}

#22
for (i in (pp_22bp_pass_GC_threshold$`Tm`)){
  pp_22bp_pass_GC_and_Tm_threshold <- subset(pp_22bp_pass_GC_threshold,(pp_22bp_pass_GC_threshold$`Tm`)>=50 & (pp_22bp_pass_GC_threshold$`Tm`)<=60)
}

#23
for (i in (pp_23bp_pass_GC_threshold$`Tm`)){
  pp_23bp_pass_GC_and_Tm_threshold <- subset(pp_23bp_pass_GC_threshold,(pp_23bp_pass_GC_threshold$`Tm`)>=50 & (pp_23bp_pass_GC_threshold$`Tm`)<=60)
}

#24
for (i in (pp_24bp_pass_GC_threshold$`Tm`)){
  pp_24bp_pass_GC_and_Tm_threshold <- subset(pp_24bp_pass_GC_threshold,(pp_24bp_pass_GC_threshold$`Tm`)>=50 & (pp_24bp_pass_GC_threshold$`Tm`)<=60)
}



#now that we have the primers that contain both a gc content betwwen 0.4-0 and 0.6
#and a Tm between 50 and 60

#########################################################################################

#Emma Code for complementary primer precursor, GC

#For the first row in the complementary primers:

#We will use the R package,  seqinr  which is frequently used by biologists for sequence manipulation.

library(seqinr)

#calculate the gc content of each row in 18bp primers
cpp_18_GC <-apply(as.matrix(complement_primer_precursor_17), MARGIN = 1, FUN = GC)

#calculate the gc content of each row in 19bp primers
cpp_19_GC <-apply(as.matrix(complement_primer_precursor_18), MARGIN = 1, FUN = GC)

#calculate the gc content of each row in 20bp primers
cpp_20_GC <-apply(as.matrix(complement_primer_precursor_19), MARGIN = 1, FUN = GC)

#calculate the gc content of each row in 21bp primers
cpp_21_GC <-apply(as.matrix(complement_primer_precursor_20), MARGIN = 1, FUN = GC)

#calculate the gc content of each row in 22bp primers
cpp_22_GC <-apply(as.matrix(complement_primer_precursor_21), MARGIN = 1, FUN = GC)

#calculate the gc content of each row in 23bp primers
cpp_23_GC <-apply(as.matrix(complement_primer_precursor_22), MARGIN = 1, FUN = GC)

#calculate the gc content of each row in 24bp primers
cpp_24_GC <-apply(as.matrix(complement_primer_precursor_23), MARGIN = 1, FUN = GC)

#merge data so that the potential primers have their associated GC
complement_primer_precursor_17["GC Content"] <- cpp_18_GC
complement_primer_precursor_18["GC Content"] <- cpp_19_GC
complement_primer_precursor_19["GC Content"] <- cpp_20_GC
complement_primer_precursor_20["GC Content"] <- cpp_21_GC
complement_primer_precursor_21["GC Content"] <- cpp_22_GC
complement_primer_precursor_22["GC Content"] <- cpp_23_GC
complement_primer_precursor_23["GC Content"] <- cpp_24_GC


#remove primers that are not within 50-60%
#we can do this through dplyr
library(dplyr)


#for loop that takes the GC content of the complement_primer_precursor$GC Content column
#if the GC content >= 0.4 and <=0.6, it will create a new file called cpp_(bplenght)bp_pass_GC_threshold

#18bp
for (i in (complement_primer_precursor_17$`GC Content`)){
  cpp_18bp_pass_GC_threshold <- subset(complement_primer_precursor_17,(complement_primer_precursor_17$`GC Content`)>=0.4 & (complement_primer_precursor_17$`GC Content`)<=0.6)
}

#19bp
for (i in (complement_primer_precursor_18$`GC Content`)){
  cpp_19bp_pass_GC_threshold <- subset(complement_primer_precursor_18,(complement_primer_precursor_18$`GC Content`)>=0.4 & (complement_primer_precursor_18$`GC Content`)<=0.6)
}

#20bp
for (i in (complement_primer_precursor_19$`GC Content`)){
  cpp_20bp_pass_GC_threshold <- subset(complement_primer_precursor_19,(complement_primer_precursor_19$`GC Content`)>=0.4 & (complement_primer_precursor_19$`GC Content`)<=0.6)
}
#21bp
for (i in (complement_primer_precursor_20$`GC Content`)){
  cpp_21bp_pass_GC_threshold <- subset(complement_primer_precursor_20,(complement_primer_precursor_20$`GC Content`)>=0.4 & (complement_primer_precursor_20$`GC Content`)<=0.6)
}

#22bp
for (i in (complement_primer_precursor_21$`GC Content`)){
  cpp_22bp_pass_GC_threshold <- subset(complement_primer_precursor_21,(complement_primer_precursor_21$`GC Content`)>=0.4 & (complement_primer_precursor_21$`GC Content`)<=0.6)
}

#23bp
for (i in (complement_primer_precursor_22$`GC Content`)){
  cpp_23bp_pass_GC_threshold <- subset(complement_primer_precursor_22,(complement_primer_precursor_22$`GC Content`)>=0.4 & (complement_primer_precursor_22$`GC Content`)<=0.6)
}

#24bp
for (i in (complement_primer_precursor_23$`GC Content`)){
  cpp_24bp_pass_GC_threshold <- subset(complement_primer_precursor_23,(complement_primer_precursor_23$`GC Content`)>=0.4 & (complement_primer_precursor_23$`GC Content`)<=0.6)
}


#######################################################################################################
#Emma code for Tm, complementary primer precursor

#############################################################################
###calculate the Tm of a primer through the TmCalculator package
library(TmCalculator)

##there are three different ways to calcualte Tm, based off of GC/based off of other nucleotides, and the Wallace Method (good for primer 14-20bp)
##we will use the Tm_NN function which takes into account the bases as well as ionic concentrations of the PCR reaction
#Tm_NN(nearest neighbor thermodynamics) is considered to be the most accurate of the Tm methods, as it takes into account primer content rather than biasing off of primer length
#you can change the input of the pcr reaction ionic concentrations using this method
##we will need to convert into strings in order for this function to work, using the Biostrings package

library(Biostrings)

#for loop to find the Tm of the first primer precursor
#18bp primers by row

nrow(cpp_18bp_pass_GC_threshold)

for (i in nrow(cpp_18bp_pass_GC_threshold)){
  cpp_18bp_pass_GC_threshold_Tm <- (apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm,apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm,apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  cpp_18bp_pass_GC_threshold_Tm <- rbind(cpp_18bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_18bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
}



#add column to the primers that passed the GC threshold 
cpp_18bp_pass_GC_threshold <- cbind(cpp_18bp_pass_GC_threshold, cpp_18bp_pass_GC_threshold_Tm)
print(cpp_18bp_pass_GC_threshold)

#19bp primers by row

nrow(cpp_19bp_pass_GC_threshold)

for (i in nrow(cpp_19bp_pass_GC_threshold)){
  cpp_19bp_pass_GC_threshold_Tm <- apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN)
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[16,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[17,])), MARGIN = 1, FUN = Tm_NN))
  cpp_19bp_pass_GC_threshold_Tm <- rbind(cpp_19bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_19bp_pass_GC_threshold[18,])), MARGIN = 1, FUN = Tm_NN))
}


#add column to the primers that passed the GC threshold 
cpp_19bp_pass_GC_threshold <- cbind(cpp_19bp_pass_GC_threshold, cpp_19bp_pass_GC_threshold_Tm)
print(cpp_19bp_pass_GC_threshold)

#20bp primers by row

nrow(cpp_20bp_pass_GC_threshold)

for (i in nrow(cpp_20bp_pass_GC_threshold)){
  cpp_20bp_pass_GC_threshold_Tm <- apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN)
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[16,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[17,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[18,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[19,])), MARGIN = 1, FUN = Tm_NN))
  cpp_20bp_pass_GC_threshold_Tm <- rbind(cpp_20bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_20bp_pass_GC_threshold[20,])), MARGIN = 1, FUN = Tm_NN))
}


#add column to the primers that passed the GC threshold 
cpp_20bp_pass_GC_threshold <- cbind(cpp_20bp_pass_GC_threshold, cpp_20bp_pass_GC_threshold_Tm)
print(cpp_20bp_pass_GC_threshold)


#21bp primers by row

nrow(cpp_21bp_pass_GC_threshold)

for (i in nrow(cpp_21bp_pass_GC_threshold)){
  cpp_21bp_pass_GC_threshold_Tm <- apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN)
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[16,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[17,])), MARGIN = 1, FUN = Tm_NN))
  cpp_21bp_pass_GC_threshold_Tm <- rbind(cpp_21bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_21bp_pass_GC_threshold[18,])), MARGIN = 1, FUN = Tm_NN))
}

#add column to the primers that passed the GC threshold 
cpp_21bp_pass_GC_threshold <- cbind(cpp_21bp_pass_GC_threshold, cpp_21bp_pass_GC_threshold_Tm)
print(cpp_21bp_pass_GC_threshold)



#22BP

nrow(cpp_22bp_pass_GC_threshold)

for (i in nrow(cpp_22bp_pass_GC_threshold)){
  cpp_22bp_pass_GC_threshold_Tm <- apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN)
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[16,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[17,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[18,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[19,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[20,])), MARGIN = 1, FUN = Tm_NN))
  cpp_22bp_pass_GC_threshold_Tm <- rbind(cpp_22bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_22bp_pass_GC_threshold[21,])), MARGIN = 1, FUN = Tm_NN))
}

#add column to the primers that passed the GC threshold 
cpp_22bp_pass_GC_threshold <- cbind(cpp_22bp_pass_GC_threshold, cpp_22bp_pass_GC_threshold_Tm)
print(cpp_22bp_pass_GC_threshold)


#23bp

nrow(cpp_23bp_pass_GC_threshold)

for (i in nrow(cpp_23bp_pass_GC_threshold)){
  cpp_23bp_pass_GC_threshold_Tm <- apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN)
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
  cpp_23bp_pass_GC_threshold_Tm <- rbind(cpp_23bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_23bp_pass_GC_threshold[16,])), MARGIN = 1, FUN = Tm_NN))
}

#add column to the primers that passed the GC threshold 
cpp_23bp_pass_GC_threshold <- cbind(cpp_23bp_pass_GC_threshold, cpp_23bp_pass_GC_threshold_Tm)
print(cpp_23bp_pass_GC_threshold)



#24BP

nrow(cpp_24bp_pass_GC_threshold)

for (i in nrow(cpp_24bp_pass_GC_threshold)){
  cpp_24bp_pass_GC_threshold_Tm <- apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[1,])), MARGIN = 1, FUN = Tm_NN)
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[2,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[3,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[4,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[5,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[6,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[7,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[8,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[9,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[10,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[11,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[12,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[13,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[14,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[15,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[16,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[17,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[18,])), MARGIN = 1, FUN = Tm_NN))
  cpp_24bp_pass_GC_threshold_Tm <- rbind(cpp_24bp_pass_GC_threshold_Tm, apply(as.matrix(c2s(cpp_24bp_pass_GC_threshold[19,])), MARGIN = 1, FUN = Tm_NN))
}

#add column to the primers that passed the GC threshold 
cpp_24bp_pass_GC_threshold <- cbind(cpp_24bp_pass_GC_threshold, cpp_24bp_pass_GC_threshold_Tm)
print(cpp_24bp_pass_GC_threshold)


#rename column names
colnames(cpp_18bp_pass_GC_threshold)[20] <- "Tm"
colnames(cpp_19bp_pass_GC_threshold)[21] <- "Tm"
colnames(cpp_20bp_pass_GC_threshold)[22] <- "Tm"
colnames(cpp_21bp_pass_GC_threshold)[23] <- "Tm"
colnames(cpp_22bp_pass_GC_threshold)[24] <- "Tm"
colnames(cpp_23bp_pass_GC_threshold)[25] <- "Tm"
colnames(cpp_24bp_pass_GC_threshold)[26] <- "Tm"


#filter out the Tm that are not within 50-60 degrees
#lets try the subset function, similar to what we did with gc content

#18bp
for (i in (cpp_18bp_pass_GC_threshold$`Tm`)){
  cpp_18bp_pass_GC_and_Tm_threshold <- subset(cpp_18bp_pass_GC_threshold,(cpp_18bp_pass_GC_threshold$`Tm`)>=50 & (cpp_18bp_pass_GC_threshold$`Tm`)<=60)
}

#19bp
for (i in (cpp_19bp_pass_GC_threshold$`Tm`)){
  cpp_19bp_pass_GC_and_Tm_threshold <- subset(cpp_19bp_pass_GC_threshold,(cpp_19bp_pass_GC_threshold$`Tm`)>=50 & (cpp_19bp_pass_GC_threshold$`Tm`)<=60)
}

#20bp
for (i in (cpp_20bp_pass_GC_threshold$`Tm`)){
  cpp_20bp_pass_GC_and_Tm_threshold <- subset(cpp_20bp_pass_GC_threshold,(cpp_20bp_pass_GC_threshold$`Tm`)>=50 & (cpp_20bp_pass_GC_threshold$`Tm`)<=60)
}

#21
for (i in (cpp_21bp_pass_GC_threshold$`Tm`)){
  cpp_21bp_pass_GC_and_Tm_threshold <- subset(cpp_21bp_pass_GC_threshold,(cpp_21bp_pass_GC_threshold$`Tm`)>=50 & (cpp_21bp_pass_GC_threshold$`Tm`)<=60)
}

#22
for (i in (cpp_22bp_pass_GC_threshold$`Tm`)){
  cpp_22bp_pass_GC_and_Tm_threshold <- subset(cpp_22bp_pass_GC_threshold,(cpp_22bp_pass_GC_threshold$`Tm`)>=50 & (cpp_22bp_pass_GC_threshold$`Tm`)<=60)
}

#23
for (i in (cpp_23bp_pass_GC_threshold$`Tm`)){
  cpp_23bp_pass_GC_and_Tm_threshold <- subset(cpp_23bp_pass_GC_threshold,(cpp_23bp_pass_GC_threshold$`Tm`)>=50 & (cpp_23bp_pass_GC_threshold$`Tm`)<=60)
}

#24
for (i in (cpp_24bp_pass_GC_threshold$`Tm`)){
  cpp_24bp_pass_GC_and_Tm_threshold <- subset(cpp_24bp_pass_GC_threshold,(cpp_24bp_pass_GC_threshold$`Tm`)>=50 & (cpp_24bp_pass_GC_threshold$`Tm`)<=60)
}



-------------------------------------------------------------------------------------------------------------------------------
Ange
-----------------------------------------------------------------------------------------------------------------------------------


###############################################################################################3
#### Ange's Code: Finding primers and complement primer strands that begin and end with G/C
###############################################################################################


### Complement strand
Allcomplementprecursors<-list(complement_primer_precursor_17,complement_primer_precursor_18,
     complement_primer_precursor_19,complement_primer_precursor_20,
     complement_primer_precursor_21,complement_primer_precursor_22,
     complement_primer_precursor_23)

list_of_good_complement_precursors <- list()

for(file in Allcomplementprecursors){
  #removing rows that start with A or T
whichcol <-1
Lastcall <- file[ ,whichcol]
NotAorT<- !(Lastcall %in% c("A","T"))
file <-file[NotAorT, ]

#removing rows that end with A or T
whichcol <-ncol(file)
Lastcall <- file[ ,whichcol]
NotAorT<- !(Lastcall %in% c("A","T"))
list_of_good_complement_precursors[[ncol(file) - 17]] <- file[NotAorT, ]
 
}

good_complement_precursors <- bind_rows(list_of_good_complement_precursors)
good_complement_precursors

####### Primer precursor strand 

Allprimerprecursors<-list(primer_precursor_17,primer_precursor_18,
                              primer_precursor_19,primer_precursor_20,
                              primer_precursor_21,primer_precursor_22,
                              primer_precursor_23)

list_of_good_primer_precursors <- list()
for(file in Allprimerprecursors){
  whichcol <-1
  Lastcall <- file[ ,whichcol]
  NotAorT<- !(Lastcall %in% c("A","T"))
  file <-file[NotAorT, ]
  
  
  whichcol <-ncol(file)
  Lastcall <- file[ ,whichcol]
  NotAorT<- !(Lastcall %in% c("A","T"))
  file <-file[NotAorT, ]
  list_of_good_primer_precursors[[ncol(file) - 17]] <- file
  
}

good_primer_precursors <- bind_rows(list_of_good_primer_precursors)
good_primer_precursors



                                       

